[gcode_macro PRINT_START]
gcode:
   {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("50")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  STATUS_HOMING        
  G28                 
  G90                   
  BED_MESH_CLEAR
    {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"          
    STATUS_HEATING                                     
    M106 S255                                          
    G1 X{x_wait} Y{y_wait} Z15 F9000                    
    M190 S{target_bed}                                
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={50} 

  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"          
    STATUS_HEATING                                      
    G1 X{x_wait} Y{y_wait} Z15 F9000                
    M190 S{target_bed}                               
    SET_DISPLAY_TEXT MSG="Soak for 5min"              
    G4 P300000                                          
  {% endif %}
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          
  M109 S150                               
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     
  STATUS_LEVELING                          
  Z_TILT_ADJUST                            
  G28 Z                                    
 SET_DISPLAY_TEXT MSG="Bed mesh"    
 STATUS_MESHING                  
# bed_mesh_calibrate                
  BED_MESH_PROFILE LOAD="default"
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             
  STATUS_HEATING                                              
  G1 X{x_wait} Y{y_wait} Z15 F9000                            
  M107                                                      
  M109 S{target_extruder}                                   


  SET_DISPLAY_TEXT MSG="Printer go brr"        
  STATUS_PRINTING                            
  G0 X{x_wait - 50} Y4 F10000                  
  G0 Z0.4                                         
  G91                                              
 VORON_PURGE    
  G28
  G90                                             
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

#[gcode_macro PRINT_START]
#gcode:
  #  G28
 #   Z_TILT_ADJUST
  #  G0 X150 Y150 Z30 F3600
#    M106 S255

  

#   {% set bedtemp = params.BED|int %}
  #  {% set hotendtemp = params.EXTRUDER|int %}
#    {% set chambertemp = params.CHAMBER|default(0)|int %}
 #   {% set material = params.MATERIAL|string %}
 #   {% set abs_soak = params.ABS_SOAK|int %}
#    {% set petg_soak = params.PETG_SOAK|int %}
#    {% set pla_soak = params.PLA_SOAK|int %}

#    M190 S{bedtemp}
#    M104 S{hotendtemp - 50}

#     {% set time = abs_soak %}

    #{% if material == "ABS" %}
    #  {% set time = abs_soak %}
    #{% elif material == "PETG" %}
    #  {% set time = petg_soak %}
   # {% elif material == "PLA" %}
   #   {% set time = pla_soak %}
  #  {% elif material == "NYLON" %}
  #    {% set time = NYLON_soak %}
  #  {% endif %}

 #   {% for _ in range(1, time) %}
  #      RESPOND MSG="Heatsoak: {_} of {time} min"
 #       G4 P{60000 * 1}
 #   {% endfor %}
    
   # G28
  #  BED_MESH_CALIBRATE
 #   M109 S{hotendtemp}
 #   M106 S0

 #   STATUS_PRINTING
  #  PURGE_LINE
   
#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
#gcode:
 #   G28
  #  M117 Heatsoak...               ; display message
   # M106 S255
  #  G0 X150 Y150 Z20
  

  #  {% set bedtemp = params.BED|int %}
  #  {% set hotendtemp = params.EXTRUDER|int %}
   # {% set chambertemp = params.CHAMBER|default(0)|int %}
   # {% set material = params.MATERIAL|string %}
   # {% set abs_soak = params.ABS_SOAK|int %}
   # {% set petg_soak = params.PETG_SOAK|int %}
   # {% set pla_soak = params.PLA_SOAK|int %}

  #  M190 S{bedtemp}
  #  M104 S{hotendtemp}

    # {% set time = abs_soak %}

    #{% if material == "ABS" %}
    #  {% set time = abs_soak %}
    #{% elif material == "PETG" %}
    #  {% set time = petg_soak %}
   # {% elif material == "PLA" %}
   #   {% set time = pla_soak %}
  #  {% elif material == "NYLON" %}
  #    {% set time = NYLON_soak %}
  #  {% endif %}



  #  {% for _ in range(1, time) %}
  #      RESPOND MSG="Heatsoak: {_} of {time} min"
  #      G4 P{60000 * 1}
#    {% endfor %}

  #  M117 Leveling...           ; display message
  # Z_TILT_ADJUST
  #  M117 Homing...             ; display message
  #  G28  
 #   M117 TACO COMPENSATION ; display message
  #  BED_MESH_CALIBRATE
 #   G28 
 #   M117 Printing...           ; display message
  #  PURGE_LINE
   # G28
    
   

[gcode_macro PRINT_END]
 #  Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
     safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    M117 Ready           ; display message
    BED_MESH_CLEAR
    #SONG_NINETOFIVE
    BACKUP_CFG
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro LOAD_FILAMENT]
gcode:
   G91
   G1 E50 F600
   G1 E20 F300
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   G90
   G1 E20 F600
   G1 E-10 F1200
   G1 E-20 F300
   G1 E-70 F1200

 

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#[gcode_macro PRINT_END]
#gcode:
    # safe anti-stringing move coords
#    {% set th = printer.toolhead %}
 #   {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
 #   {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
  
 #   SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
  #  M400                           ; wait for buffer to clear
   # G92 E0                         ; zero the extruder
   # G1 E-5.0 F1800       ; retract filament
    
  #  TURN_OFF_HEATERS
    
   # G90                                      ; absolute positioning
  #  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  #  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
   # M107                                     ; turn off fan


   # BED_MESH_CLEAR
   # SONG_NINETOFIVE
 #   RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro PURGE_LINE]
gcode:
    G0 Y2 X2 F12000.0                     ; go to tongue of print bed
    G1 Z0.2 F1200.0                 ; move bed to nozzle
    G92 E0.0                       ; reset extruder
    G1 E2 F500                     ; pre-purge prime LENGTH SHOULD MATCH YOUR PRINT_END RETRACT
    G1 X80 E10.0 F3000.0             ; intro line 1
    G1 Y1.1                        ; move in a little
    G92 E0.0
    G1 X100 E90.0 F3000.0             ; second line
    G92 E0.0                       ; reset extruder
    G1 Z2.0                        ; move nozzle to prevent scratch

############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 100		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.95		# Fan speed once bed temp is reached  
variable_slow: 0.3		# Fan speed while bed is heating
gcode:

########## Bed Fans #########

[fan_generic BedFans]
pin: PB11
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set SLOW = printer["gcode_macro _BEDFANVARS"].slow|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={SLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set FAST = printer["gcode_macro _BEDFANVARS"].fast|float %}
	
	SET_FAN_SPEED FAN=BedFans SPEED={FAST}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedFans SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}


[gcode_macro VORON_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
    {% set size = 10 | float %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

            G92 E0                                                                                      # Reset extruder
            G0 F{travel_speed}                                                                          # Set travel speed
            G90                                                                                         # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                               # Move to purge position
            G0 Z{purge_height}                                                                          # Move to purge Z height
            M83                                                                                         # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                                      # Move tip of filament to nozzle
            G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}# Purge first line of logo
            G1 E-.5 F2100                                                                               # Retract
            G0 Z{purge_height*2}                                                                        # Z hop
            G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}                                      # Move to second purge line origin
            G0 Z{purge_height}                                                                          # Move to purge Z height
            G1 E.5 F2100                                                                                # Recover
            G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}     # Purge second line of logo
            G1 E-.5 F2100                                                                               # Retract
            G0 Z{purge_height*2}                                                                        # Z hop
            G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}                                           # Move to third purge line origin
            G0 Z{purge_height}                                                                          # Move to purge Z height
            G1 E.5 F2100                                                                                # Recover
            G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}   # Purge third line of logo
            G1 E-.5 F2100                                                                               # Retract
            G92 E0                                                                                      # Reset extruder distance
            M82                                                                                         # Absolute extrusion mode
            G0 Z{purge_height*2} F{travel_speed}  

    {% endif %}